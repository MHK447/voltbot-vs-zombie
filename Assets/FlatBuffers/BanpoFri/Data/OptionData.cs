// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BanpoFri.Data
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct OptionData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static OptionData GetRootAsOptionData(ByteBuffer _bb) { return GetRootAsOptionData(_bb, new OptionData()); }
  public static OptionData GetRootAsOptionData(ByteBuffer _bb, OptionData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OptionData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Language { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLanguageBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLanguageBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLanguageArray() { return __p.__vector_as_array<byte>(4); }
  public bool Bgm { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateBgm(bool bgm) { int o = __p.__offset(6); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(bgm ? 1 : 0)); return true; } else { return false; } }
  public bool Effect { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateEffect(bool effect) { int o = __p.__offset(8); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(effect ? 1 : 0)); return true; } else { return false; } }
  public bool Slowgraphic { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateSlowgraphic(bool slowgraphic) { int o = __p.__offset(10); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(slowgraphic ? 1 : 0)); return true; } else { return false; } }
  public bool Vibration { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool MutateVibration(bool vibration) { int o = __p.__offset(12); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(vibration ? 1 : 0)); return true; } else { return false; } }
  public bool Subscribeorder { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateSubscribeorder(bool subscribeorder) { int o = __p.__offset(14); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(subscribeorder ? 1 : 0)); return true; } else { return false; } }
  public bool Autofelling { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateAutofelling(bool autofelling) { int o = __p.__offset(16); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(autofelling ? 1 : 0)); return true; } else { return false; } }

  public static Offset<BanpoFri.Data.OptionData> CreateOptionData(FlatBufferBuilder builder,
      StringOffset languageOffset = default(StringOffset),
      bool bgm = false,
      bool effect = false,
      bool slowgraphic = false,
      bool vibration = true,
      bool subscribeorder = false,
      bool autofelling = false) {
    builder.StartTable(7);
    OptionData.AddLanguage(builder, languageOffset);
    OptionData.AddAutofelling(builder, autofelling);
    OptionData.AddSubscribeorder(builder, subscribeorder);
    OptionData.AddVibration(builder, vibration);
    OptionData.AddSlowgraphic(builder, slowgraphic);
    OptionData.AddEffect(builder, effect);
    OptionData.AddBgm(builder, bgm);
    return OptionData.EndOptionData(builder);
  }

  public static void StartOptionData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddLanguage(FlatBufferBuilder builder, StringOffset languageOffset) { builder.AddOffset(0, languageOffset.Value, 0); }
  public static void AddBgm(FlatBufferBuilder builder, bool bgm) { builder.AddBool(1, bgm, false); }
  public static void AddEffect(FlatBufferBuilder builder, bool effect) { builder.AddBool(2, effect, false); }
  public static void AddSlowgraphic(FlatBufferBuilder builder, bool slowgraphic) { builder.AddBool(3, slowgraphic, false); }
  public static void AddVibration(FlatBufferBuilder builder, bool vibration) { builder.AddBool(4, vibration, true); }
  public static void AddSubscribeorder(FlatBufferBuilder builder, bool subscribeorder) { builder.AddBool(5, subscribeorder, false); }
  public static void AddAutofelling(FlatBufferBuilder builder, bool autofelling) { builder.AddBool(6, autofelling, false); }
  public static Offset<BanpoFri.Data.OptionData> EndOptionData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BanpoFri.Data.OptionData>(o);
  }
};


}
