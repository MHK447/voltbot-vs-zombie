// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BanpoFri.Data
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct OutGameUnitUpgradeData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static OutGameUnitUpgradeData GetRootAsOutGameUnitUpgradeData(ByteBuffer _bb) { return GetRootAsOutGameUnitUpgradeData(_bb, new OutGameUnitUpgradeData()); }
  public static OutGameUnitUpgradeData GetRootAsOutGameUnitUpgradeData(ByteBuffer _bb, OutGameUnitUpgradeData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OutGameUnitUpgradeData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Unitidx { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateUnitidx(int unitidx) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, unitidx); return true; } else { return false; } }
  public int Unitlevel { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateUnitlevel(int unitlevel) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, unitlevel); return true; } else { return false; } }
  public int Cardcount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateCardcount(int cardcount) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, cardcount); return true; } else { return false; } }

  public static Offset<BanpoFri.Data.OutGameUnitUpgradeData> CreateOutGameUnitUpgradeData(FlatBufferBuilder builder,
      int unitidx = 0,
      int unitlevel = 0,
      int cardcount = 0) {
    builder.StartTable(3);
    OutGameUnitUpgradeData.AddCardcount(builder, cardcount);
    OutGameUnitUpgradeData.AddUnitlevel(builder, unitlevel);
    OutGameUnitUpgradeData.AddUnitidx(builder, unitidx);
    return OutGameUnitUpgradeData.EndOutGameUnitUpgradeData(builder);
  }

  public static void StartOutGameUnitUpgradeData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddUnitidx(FlatBufferBuilder builder, int unitidx) { builder.AddInt(0, unitidx, 0); }
  public static void AddUnitlevel(FlatBufferBuilder builder, int unitlevel) { builder.AddInt(1, unitlevel, 0); }
  public static void AddCardcount(FlatBufferBuilder builder, int cardcount) { builder.AddInt(2, cardcount, 0); }
  public static Offset<BanpoFri.Data.OutGameUnitUpgradeData> EndOutGameUnitUpgradeData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BanpoFri.Data.OutGameUnitUpgradeData>(o);
  }
};


}
