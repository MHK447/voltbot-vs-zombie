// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BanpoFri.Data
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RecordCount : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RecordCount GetRootAsRecordCount(ByteBuffer _bb) { return GetRootAsRecordCount(_bb, new RecordCount()); }
  public static RecordCount GetRootAsRecordCount(ByteBuffer _bb, RecordCount obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RecordCount __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Idx { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdxBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdxBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdxArray() { return __p.__vector_as_array<byte>(4); }
  public int Count { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateCount(int count) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, count); return true; } else { return false; } }

  public static Offset<BanpoFri.Data.RecordCount> CreateRecordCount(FlatBufferBuilder builder,
      StringOffset idxOffset = default(StringOffset),
      int count = 0) {
    builder.StartTable(2);
    RecordCount.AddCount(builder, count);
    RecordCount.AddIdx(builder, idxOffset);
    return RecordCount.EndRecordCount(builder);
  }

  public static void StartRecordCount(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddIdx(FlatBufferBuilder builder, StringOffset idxOffset) { builder.AddOffset(0, idxOffset.Value, 0); }
  public static void AddCount(FlatBufferBuilder builder, int count) { builder.AddInt(1, count, 0); }
  public static Offset<BanpoFri.Data.RecordCount> EndRecordCount(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BanpoFri.Data.RecordCount>(o);
  }
};


}
